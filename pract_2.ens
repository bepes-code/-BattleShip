; TO-DO LIST

; Falta arreglar codigo ASCII / o alguna forma de printejar el Contador 
; Falta comentar la part de (consulta_estat_teclat) linea 203, que no e entes gaire



; ---------------------------------------------------------------
; Nom alumne 1: Aleix Rosinach
; Nom alumne 2: Guillermo Esquinas
; Grup: 4t
; Sessió: PR-PRA2
; --------------------------------------------------------------- 

;---------------------------------------
;| BATELSHIP GAME BY ALEIX & GUILLERMO |
;---------------------------------------


; Inicialitzem el teclat i la pantalla a les seves dirrecions
TECLAT EQU 0E000h
PANTALLA EQU 0F000h

; Definim el origen de memoria del programa
ORIGEN 010h

INICIO ini
.DATOS

	; Pantalla inciial del joc 
	
	text_splash_1 VALOR "---------------"
	text_splash_2 VALOR "BATELSHIP  GAME"
	text_splash_3 VALOR "      BY       "
	text_splash_4 VALOR "Aleix  Rosinach"
	text_splash_5 VALOR "      Y        "
	text_splash_6 VALOR "Guillermo Esq. "
	text_splash_7 VALOR "---------------"
	text_splash_8 VALOR "PRESS SPACE NOW"
	
	
	; Graella del joc
	text_graella_1 VALOR "    123456     "
	text_graella_2 VALOR "   a           "
	text_graella_3 VALOR "   b           "
	text_graella_4 VALOR "   c           "
	text_graella_5 VALOR "   d           "
	text_graella_6 VALOR "   e           "
	text_graella_7 VALOR "   f        L= "
	text_graella_8 VALOR "            N= "
	
	
	; Pantalla final del joc
	text_win_1 VALOR "---------------"
	text_win_2 VALOR "  ENORABHONA   "
	text_win_3 VALOR "               "
	text_win_4 VALOR "               "
	text_win_5 VALOR "               "
	text_win_6 VALOR "Intents =      "
	text_win_7 VALOR "               "
	text_win_8 VALOR "---------------"
	
	
	; Graella del tauler
	text_tauler_1 VALOR "      "
	
	
	text_hit VALOR " "            ; Text per imprimir el color del intent 
	
	
	contador_barcos VALOR 0000h   ; Contador de barcos endevinats
	

	marcador_intents VALOR 0000h  ; Contador de intents
	
	
	;Vectors per imprimir la graella del joc
	graella_horitzontal VALOR " ABCDEFGHIJ    "
	graella_vertical VALOR " 123456 "
	

	;Vectir per a desar les coordenades introduir per teclat 
	coordenada_x VALOR " "
	coordenada_y VALOR " "
	
	
	;Disposició dels barcos
				;A B C D E F
	fila_a VALOR 1,1,1,0,0,0
	fila_b VALOR 0,0,0,0,0,1
	fila_c VALOR 1,0,1,1,0,0
	fila_d VALOR 1,0,0,0,0,0
	fila_e VALOR 0,0,0,0,0,1
	fila_f VALOR 0,0,0,1,0,0 
	
	; Variables dels colors
	
	

.CODIGO
ini: ;programa principal

	; Iniciem el programa netejant tota la pantalla
	MOVH R0, BYTEALTO DIRECCION netejar_pantalla
	MOVL R0, BYTEBAJO DIRECCION netejar_pantalla
	CALL R0
	
	
	; Mostrem pantalla de inici del joc
	MOVH R0, BYTEALTO DIRECCION splash
	MOVL R0, BYTEBAJO DIRECCION splash
	CALL R0
	
	
	; Escoltem el teclat fins que es premi la tecla espai
	MOVH R0, BYTEALTO DIRECCION esperant_espai
	MOVL R0, BYTEBAJO DIRECCION esperant_espai
	CALL R0
	
	
	; ---------- EL JOC S'HA INCIAT (ja que s'ha pitjat espai)--------------
	
	; Netejem pantalla
	MOVH R0, BYTEALTO DIRECCION netejar_pantalla
	MOVL R0, BYTEBAJO DIRECCION netejar_pantalla
	CALL R0
	
	
	; Imprimir graella per començar el joc
	MOVH R0, BYTEALTO DIRECCION imprimir_graella
	MOVL R0, BYTEBAJO DIRECCION imprimir_graella
	CALL R0
	
	; El jugador ja ha començat a jugar, s'exectuara mentres no hagi acabat la partida
	torn_jugador:
	
		; Esperem a que el jugador introdueixi les coordenadores per indicar una posició al tauler
		MOVH R0, BYTEALTO DIRECCION esperant_coordenades_jugador
		MOVL R0, BYTEBAJO DIRECCION esperant_coordenades_jugador
		CALL R0
		
		
		; Consultem si la coordenada conte un barco o no
		MOVH R0, BYTEALTO DIRECCION consultar_hit
		MOVL R0, BYTEBAJO DIRECCION consultar_hit
		CALL R0
		
		
		; Comprovem si el jugador ha acabat la partida
		MOVH R0, BYTEALTO DIRECCION comprovar_final
		MOVL R0, BYTEBAJO DIRECCION comprovar_final
		CALL R0


	; El joc s'ha acabat
	MOVH R0, BYTEALTO DIRECCION final
	MOVL R0, BYTEBAJO DIRECCION final
	CALL R0

		
	
	; DEFINIM LES FUNCIONS
	
	; Funcio netejar pantalla 
	netejar_pantalla:
		MOVH R0, BYTEALTO PANTALLA ; Cridem a R0 la primera posicio de pantalla
		MOVL R0, BYTEBAJO PANTALLA
		MOVH R1, 10h
		MOVL R1, 120
		ADD R0, R0, R1
		
		MOVH R1, 00h
		MOVL R1, 11b
		MOV [R0], R1
		
		RET
	
	; Funció splash (printejar la pantalla de carga)
	splash:
		; Cridem a R0 la primera posicio de pantalla
		MOVH R0, BYTEALTO PANTALLA
		MOVL R0, BYTEBAJO PANTALLA
		
		; Definim les posicions que te la pantalla
		MOVH R2, 00h
		MOVL R2, 120 
		
		; Guardem a R3 la posicio de text_splash
		MOVH R3, BYTEALTO DIRECCION text_splash_1
		MOVL R3, BYTEBAJO DIRECCION text_splash_1
		
		imprimir_titol:
			MOV R4, [R3]	; Guardem a R4, el valor que conte la posicio de splash, el primer valor serà ---------------
			MOVH R4, 00111000b ; Definim el color de fons de color blanc i el text negre
			MOV [R0], R4 ; Movem a la panatalla el valor que volem imprimir
			INC R0
			INC R3 ; Incrementem R3, per a reccorre tota la pantalla
			DEC R2 ; Decrementem el contador de posicions
			BRNZ imprimir_titol
		RET
		
		
	; Funcio que consula el estat del tectlat
	consulta_estat_teclat:
		MOVH R0, BYTEALTO TECLAT 
		MOVL R0, BYTEBAJO TECLAT
		
		INC R0 ; 
		
		MOVH R1, 00000001b ; 
		MOVL R1, 00h
		
		consultar_estat:
			
			MOV R2, [R0]
			
			COMP R2, R1 ; esperm a que tingui algun valor el buffer
			
			BRNZ consultar_estat
		
	RET
	
	; Funcio esperar espai
	esperant_espai:
		
		;Consultem buffer del teclat
		MOVH R0, BYTEALTO DIRECCION consulta_estat_teclat
		MOVL R0, BYTEBAJO DIRECCION consulta_estat_teclat
		CALL R0
		
		; Si estem aqui vol dir que s'ha pitjat alguna  tecla al teclat, ara mirarem quina
		
		MOVH R0, BYTEALTO TECLAT
		MOVl R0, BYTEBAJO TECLAT
		
		MOV R1, [R0]
		
		; Espai en codi ASCCI
		MOVH R0, 32h
		MOVL R0, 20h
		
		; Comparem si el resultat es igual (si el valor del buffer del teclat es igual a R0, que conte el valor de l'espai)
		COMP R1, R0
		BRNZ esperant_espai
		
	RET
		
	imprimir_graella:
		; Guardem la primera posicio de la pantalla
		MOVH R0, BYTEALTO PANTALLA
		MOVL R0, BYTEBAJO PANTALLA
		
		; Guardem les totes les posicions que te la pantalla
		MOVH R2, 00h
		MOVL R2, 120
		
		; Guardem la primera posicio del text de la graella
		MOVH R3, BYTEALTO DIRECCION text_graella_1
		MOVL R3, BYTEBAJO DIRECCION text_graella_1
		
		; Imprimim la Graella
		imprimir_fons_graella:
			MOV R4, [R3]
			MOVH R4, 00000111b ; Definim el color, fons negre i text blanc
			MOV [R0], R4
			INC R0
			INC R3
			DEC R2
			BRNZ imprimir_fons_graella
		
	
		
		; Imprimir tauler de joc (blanc i blau)
		MOVH R0, BYTEALTO PANTALLA				  ; R0 ---> Primera posició PANTALLA
		MOVL R0, BYTEBAJO PANTALLA
		
		MOVH R1, 00h							  ; R1 ---> "Salt" posicions fins primera pos tauler
		MOVL R1, 19
		
		MOVH R5, 00h							  ; R5 ---> "Salt" posicio proxima fila ("salta" de la última pos fila actual a primera pos fila posterior)
		MOVL R5, 9
		
		ADD R0, R0, R1 							  ; R0 ---> Pimera posicio tauler
		
		MOVH R1, 00h 							  ; R1 ---> Iterador per imprimir les files
		MOVL R1, 6
		
		MOVH R3, BYTEALTO DIRECCION text_tauler_1 ; R3 ---> Direcció caràcter que ha d'escriure a cada casella del tauler fila (" ")
		MOVL R3, BYTEBAJO DIRECCION text_tauler_1
		
		MOV R4, [R3]							  ; R4 ---> Caràcter que ha d'escriure a cada casella del tauler fila (" ")
		
		imprimir_files:
			MOVH R2, 00h 				; R2 ---> Iterador per imprimir les caselles d'una fila
			MOVL R2, 6
			
			imprimir_fila_1:			; BLANC -- BLAU -- BLANC -- BLAU -- BLANC -- BLAU
				MOVH R4, 00111111b		; Color blanc
				MOV [R0], R4			; Imprimir casella BLANCA
				INC R0					; Incrementem posicio pantalla
				DEC R2					; Decremento contador de les caselles de la fila a imprimir
				
				MOVH R4, 00001001b		; Color blau
				MOV [R0], R4			; Imprimir casella BLAVA
				INC R0                  ; Incrementem posicio pantalla
				DEC R2					; Decremento contador de les caselles de la fila a imprimir
				BRNZ imprimir_fila_1	; Efectúa el bucle 3 cops, ja que imprimeix 2 caselles (BLANC - BLAU) a cada recorregut
				
			
			MOVH R2, 00h 				; R2 ---> Resetejo contador de caselles a imprimir
			MOVL R2, 6
			
			DEC R1						; Decremento contador de files a imprimir
			
			ADD R0, R0, R5				; Passa a la primera posició de la fila següent
			
			imprimir_fila_2:			; BLAU -- BLANC -- BLAU -- BLANC -- BLAU -- BLANC
				MOVH R4, 00001001b		; Color blau
				MOV [R0], R4			; Imprimir casella BLAVA
				INC R0					; Incrementem posicio pantalla
				DEC R2					; Decremento contador de les caselles de la fila a imprimir
				
				MOVH R4, 00111111b		; Color blanc
				MOV [R0], R4			; Imprimir casella BLANCA
				INC R0					; Incrementem posicio pantalla
				DEC R2					; Decremento contador de les caselles de la fila a imprimir
				BRNZ imprimir_fila_2	; Repeteix el bucle 3 cops, ja que imprimeix 2 caselles (BLAU - BLANC) a cada recorregut
				
			MOVH R2, 00h 				; R1 ---> Iterador imprimir_fila
			MOVL R2, 6
			
			ADD R0, R0, R5				; Passa a la posició fila seg
			
			DEC R1						; Decremento contador de files a imprimir
			
			BRNZ imprimir_files			; Efectúa el bucle 3 cops, ja que imprimeix dues files diferents entre si a cada recorregut
		RET
	
	; DEMANAR COORDENADES 
	
	esperant_coordenades_jugador:
		
		;Llegir buffer 
		MOVH R0, BYTEALTO DIRECCION consulta_estat_teclat
		MOVL R0, BYTEBAJO DIRECCION consulta_estat_teclat
		
		CALL R0
	
		
		MOVH R0, BYTEALTO TECLAT
		MOVL R0, BYTEBAJO TECLAT
		
		MOV R1,[R0]
		MOVH R1,00h
		
		; Anirem fent comparacions si el valor del buffer es igual a algun dels valors que acceptem en aquest cas les lletres a,b,c,d,e,f
		MOVH R0, 00h
		MOVL R0, 'a'
		
		COMP R1, R0
		BRZ coordenada_y_valida ; Si es correcta saltarem a cordenada_y_valida
		
		MOVL R0, 'b'
		COMP R1, R0
		BRZ coordenada_y_valida
		
		MOVL R0, 'c'
		COMP R1, R0
		BRZ coordenada_y_valida
		
		MOVL R0, 'd'
		COMP R1, R0
		BRZ coordenada_y_valida
		
		MOVL R0, 'e'
		COMP R1, R0
		BRZ coordenada_y_valida
		
		MOVL R0, 'f'
		COMP R1, R0
		BRZ coordenada_y_valida
		
		JMP esperant_coordenades_jugador ; Si no ha trobat cap lletra correca tornem a fer el bucle fins a que introdueixin una lletra correcta
		
		
		; Si entrem vol dir que una lletra es correcta
		coordenada_y_valida:
			MOVH R1, BYTEALTO DIRECCION coordenada_y
			MOVL R1, BYTEBAJO DIRECCION coordenada_y
			
			MOV [R1], R0 ; Guardem la lletra a coordenada_y
			
			MOVH R1, BYTEALTO PANTALLA 
			MOVL R1, BYTEBAJO PANTALLA
			
			MOVH R2, 00h
			MOVL R2, 104	; Definim la posicio que ficarem la lletra a la pantalla
			
			ADD R1, R1, R2
			
			MOVH R0, 00000111b
			MOV [R1], R0 ; Imprimir la lletra a la pantalla
		
		; Un cop la cordenada y esta introduida mirem la X
		
		esperant_cordenada_x:
			; Esperem al buffer del teclat
			MOVH R0, BYTEALTO DIRECCION consulta_estat_teclat
			MOVL R0, BYTEBAJO DIRECCION consulta_estat_teclat
			CALL R0
			
			coordenada_horitzontal:
				MOVH R0, BYTEALTO TECLAT
				MOVL R0, BYTEBAJO TECLAT
				MOV R1,[R0]
				MOVH R1,00h
				; Tornem a fer el mateix procediment que amb les lletrs, anirem comparan si el buffer es igual a algun dels numeros correctes que tenim definits
				MOVH R0, 00h
				MOVL R0, '1'
				COMP R1,R0
				BRZ coordenada_x_valida
				
				MOVL R0, '2'
				COMP R1,R0
				BRZ coordenada_x_valida
				
				MOVL R0, '3'
				COMP R1,R0
				BRZ coordenada_x_valida
				
				MOVL R0, '4'
				COMP R1,R0
				BRZ coordenada_x_valida
				
				MOVL R0, '5'
				COMP R1,R0
				BRZ coordenada_x_valida
				
				MOVL R0, '6'
				COMP R1,R0
				BRZ coordenada_x_valida

				JMP esperant_cordenada_x
				
				; Salta a cordenada_x_valida si algun compare ha sigut valid
				coordenada_x_valida:
					MOVH R1, BYTEALTO DIRECCION coordenada_x
					MOVL R1, BYTEBAJO DIRECCION coordenada_x
					
					MOV [R1], R0 ; Guardem el numero correcte a coordenada_x
					
					MOVH R1, BYTEALTO PANTALLA 
					MOVL R1, BYTEBAJO PANTALLA
					
					MOVH R2, 00h
					MOVL R2, 119 ; Definexo la posicio de pantalla a la que printejare el nuemro
					
					ADD R1, R1, R2
					
					MOVH R0, 00000111b 
					MOV [R1], R0 ; Imprimeixo el numero a la pantalla,amb el format definit a R0
				
		
		RET
			
	; CALCULAR HIT
	
	consultar_hit:
		MOVH R0, BYTEALTO DIRECCION coordenada_x	; X ---> Coordenades numériques
		MOVL R0, BYTEBAJO DIRECCION coordenada_x 
		MOV R0, [R0] 								; Llegeixo el valor de X
		
		MOVH R1, BYTEALTO DIRECCION coordenada_y	; Y ---> Coordenades de lletres
		MOVL R1, BYTEBAJO DIRECCION coordenada_y 
		MOV R1, [R1] 								; Llegeixo el valor de Y
		
		MOVH R2, 00h								; R2 ---> Valor relacionat amb el codi ASCII per poder "transformar" les lletres ---> num
		MOVL R2, 96
		
		MOVH R6, 00h								; R6 ---> Valor relacionat amb el codi ASCII per poder transformar els números en ASCII a números amb els que es pugui operar correctament
		MOVL R6, 48
		
		SUB R0, R0, R6 								; R0 ---> Valor coordenada numérica ---> R0 = ASCII del número - 48 = Valor del número

		MOVH R5, 00h								; R5 ---> Valor salt 1 línia
		MOVL R5, 15
		
		; POSICIÓ COLUMNA
		
		MOVH R3, BYTEALTO PANTALLA					; R3 ---> Primera pos pantalla
		MOVL R3, BYTEBAJO PANTALLA
		
		MOVH R4, 00h								; R4 ---> "Salt" de la primera posició de la pantalla a col·lorcar-se en la posició 1 fila per sobre de la coordenada "a" de la graella del tauler ---> Això es fa donat que el bucle mul de més endavant no pot multiplicar per 0
		MOVL R4, 3
		
		ADD R3, R3, R4								; R3 ---> Posició 1 fila per sobre de la coordenada "a" de la graella del tauler
		
		ADD R3, R3, R0								; R3 ---> Posició a la primera fila de la pantalla i just una fila per sobre de la coordenada numérica introduïda pel teclat
		
		; LLETRA ---> VALOR NUMÉRIC
		
		SUB R4, R1, R2								; R4 ---> Valor numeric de la Lletra (a = 1, b = 2, c = 3, ...)
		
		; POSICIÓ FILA
		
		XOR R6, R6, R6								; Inicialitzem R6 a 0
		MOV R2, R4 									; R2 ---> Valor numéric de la lletra introduïda pel teclat
		
		mul:										; R6 ---> Volem calcular quantes posicions ens hem de moure per col·locar-nos en la posició corresponent del tauler de la pantalla
			ADD R6, R6, R5							; R5 ---> "Salts" de linia a fer
			DEC R4
			BRNZ mul								; Multiplicarem ---> Valor lletra introduïda * Posicions per efectuar un salt de línia
			
		ADD R3, R3, R6								; R3 ---> Ens col·loquem en la posició corresponent del tauler
		
		; POSICIÓ TAULER VECTORS
		
		MOVH R1, 00h
		MOVL R1, 1
		
		MOVH R5, 00h								; R6 ---> Posicions a "saltar" per colocar-nos una fila per sota de la posició actual dins dels vectors del tauler (6 * 6)
		MOVL R5, 6
		
		XOR R6, R6, R6								; Inicialitzem R6 a 0
		
		SUB R4, R4, R5 								; R5 ---> 0 - 6 = -6 ---> R4 té valor 0 (es pot veure al bucle mul) ---> Objectiu: "Col·locar-se" una fila per sobre de la primera posició del tauler ---> Això es fa donat que el bucle mul_vec de més endavant no pot multiplicar per 0
		
		ADD R4, R4, R0								; R4 ---> Ens col·loquem just 1 fila per sobre de la coordenada numérica introduïda pel teclat
		
		mul_vec:									; R6 ---> Volem calcular quantes posicions ens hem de moure per col·locar-nos en la posició corresponent del tauler
			ADD R6, R6, R5							; R5 ---> "Salts" de linia a fer	
			DEC R2									; R2 ---> Valor numéric lletra introduïda pel teclat
			BRNZ mul_vec							; Multiplicarem ---> Valor lletra introduïda * Posicions per efectuar un salt de línia dins del tauler
		
		ADD R4, R4, R6								
		SUB R4, R4, R1								; R4 ---> Posicion a moure's a partir de la primera posició del tauler per col·locarnos en la posició corresponent ---> -1 ja que la primera posició "compta" com un 0
		
	
		MOVH R0, BYTEALTO DIRECCION fila_a			; R0 ---> Primera posició del vector que representa el tauler de joc
		MOVL R0, BYTEBAJO DIRECCION fila_a
		ADD R0, R0, R4								; R0 ---> Ens col·loquem en la posició corresponent del vector que representa el tauler de joc
		MOV R0, [R0]								; R0 ---> Valor de la posició del tauler de joc ("0" o "1") 
		

		
		MOV R4, [R3] ; Guardem a R4, la informacio de pantalla de la posicio que indica el jugador
		MOVH R2, 00010000b
		MOVL R2, ' '
		COMP R4, R2	; Mirem si la posicio es verda, aixo voldra dir que ja havia endivinat aquesta casella
		BRZ barco_endivinat_anteriorment; Si es verda saltem a barco_endivinat_anteriorment
		
		; Guardem el valor de 1
		MOVH R1, 00h
		MOVL R1, 1
		
		
		COMP R0,R1 ; Comparem si la posicio indicada es un 1 o un 0 [Barco endivinat o no]
		BRZ tocat ; En el cas de que si sigui 1 saltem a tocat
		
		; En cas de que no, definim el color vermell
		MOVH R1,00100000b
		MOVL R1, ' '
		JMP imprimir_resultat ; Saltem a imprimir resultat
		
		
		tocat:
			MOVH R1, 00010000b ; Definim el format de color verd
			MOVL R1, ' '
			
			; Suma 1 contador de barcos
			MOVH R5, BYTEALTO DIRECCION contador_barcos
			MOVL R5, BYTEBAJO DIRECCION contador_barcos
			
			MOV R6, [R5]
			INC R6
			MOV [R5], R6 ;Guarda el valor +1 a el contador de barcos
			JMP imprimir_resultat ; Salta a imprir reesultat amb el color verd definit a R1
			
		barco_endivinat_anteriorment:
			; Si el barco ja ha estat endivinat, no sumem +1 al contador pero definim el color verd per a que pinti a damunt
			MOVH R1, 00010000b ; Color verd
			MOVL R1, ' '
			JMP imprimir_resultat ; Saltem a imprimir_resultat
			
		imprimir_resultat:
			MOV [R3], R1 ; Imprimir el color que toqui a la casella, vermell si ha sigut incorrecte, o verd en els cassos de que un barco sigui encertat, o ja hagi sigut encertat anteriorment
			MOVH R2, BYTEALTO DIRECCION marcador_intents
			MOVL R2, BYTEBAJO DIRECCION marcador_intents
			MOV R4, [R2]
			INC R4
			MOV [R2], R4 ; Sumem 1 al contador de intents
		
		
		
	comprovar_final:
		;Mira si el jugador ha arribat als 6 barcos eliminats
		MOVH R3, BYTEALTO DIRECCION contador_barcos
		MOVL R3, BYTEBAJO DIRECCION contador_barcos
		MOV R4, [R3]
		
		MOVH R2, 00h
		MOVL R2, 10  ; 10 barcos en total
		
		COMP R4, R2 ; Comparem si el cotnador de barcos eliminats es 10 (el qual significara que ha endivinat els barcos)
		BRZ win ; En el cas de que la comparacio sigui correcta saltem a win
		
		
		
		;En cas de que no hagi guanyat seguim el joc
	
		MOVH R0, BYTEALTO DIRECCION torn_jugador
		MOVL R0, BYTEBAJO DIRECCION torn_jugador
		CALL R0
		
		win:
			; En el cas de que hagi guanyat imprimir la pantalla de victoria
			; Definim posicio de pantalla
			MOVH R0, BYTEALTO PANTALLA
			MOVL R0, BYTEBAJO PANTALLA
		
			; Definim posicions de la pantalla totals
			MOVH R2, 00h
			MOVL R2, 120
			
			
			;Guardem el valor de la posico de text_win_1
			MOVH R3, BYTEALTO DIRECCION text_win_1
			MOVL R3, BYTEBAJO DIRECCION text_win_1
		
			imprimir_titol_win:
				MOV R4, [R3]
				MOVH R4, 00111000b
				MOV [R0], R4 ; Imprimir el text pretinent, amb fondo blanc i text negre
				INC R0
				INC R3
				DEC R2
				BRNZ imprimir_titol_win
				
			imprimir_intents:
				; I finalment imprimir el numero final de intents
				MOVH R1, BYTEALTO PANTALLA 
				MOVL R1, BYTEBAJO PANTALLA
				
				MOVH R0, BYTEALTO DIRECCION marcador_intents
				MOVL R0, BYTEBAJO DIRECCION marcador_intents
				

				;El valor de R0 tiene el valor de nummero de intents en numero hexadeciaml pero necesito pasarlo a CODIGO ASCII para printearlo
				
				; Definixo la posicio de la pantalla on vull printejar el resultat
				
				MOVH R2, 00h
				MOVL R2, 86
					
				
				MOVH R4, 00h
				MOVL R4, 48 ; Priemra posicio del codigo ASCCI dels numeros
				
				ADD R1, R1, R2
				ADD R3, R3, R4
				
				; Sutilizen  R3 i R1 
				
				MOV R3, [R0] ; Copio el valor dls intenttns a R3
				MOVH R3, 00111000b ; Dono format al valor de punts
				MOV [R1], R3 ; Imprimeixo els punts a la posicio 86 amb el format i numero corresponent
			
final:
	FIN